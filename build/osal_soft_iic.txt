; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\build\osal_soft_iic.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\osal_soft_iic.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\driver -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C1290NCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DTM4C1290NCZAD --omf_browse=.\build\osal_soft_iic.crf Application\OSAL_Soft_IIC.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  iic_half_delay PROC
;;;49     
;;;50     static void iic_half_delay(void)
000000  2000              MOVS     r0,#0
;;;51     {
;;;52     	int index = 0;
;;;53     	
;;;54     	while(index < IIC_HALF_DEALY_TIME){
000002  e000              B        |L1.6|
                  |L1.4|
;;;55     		index++;
000004  1c40              ADDS     r0,r0,#1
                  |L1.6|
000006  280f              CMP      r0,#0xf               ;54
000008  dbfc              BLT      |L1.4|
;;;56     	}
;;;57     }
00000a  4770              BX       lr
;;;58     
                          ENDP

                  iic_delay PROC
;;;59     static void iic_delay(void)
00000c  2000              MOVS     r0,#0
;;;60     {
;;;61     	 int index = 0;
;;;62     	
;;;63     	while(index < IIC_DELAY_TIME){
00000e  e000              B        |L1.18|
                  |L1.16|
;;;64     		index++;
000010  1c40              ADDS     r0,r0,#1
                  |L1.18|
000012  281e              CMP      r0,#0x1e              ;63
000014  dbfc              BLT      |L1.16|
;;;65     	}
;;;66     }
000016  4770              BX       lr
;;;67     
                          ENDP

                  iic_start PROC
;;;68     
;;;69     static void iic_start(iic_device_t device)
000018  b510              PUSH     {r4,lr}
;;;70     {
00001a  4604              MOV      r4,r0
;;;71     	 iic[device]->sda(1);
00001c  48d7              LDR      r0,|L1.892|
00001e  f8500024          LDR      r0,[r0,r4,LSL #2]
000022  6801              LDR      r1,[r0,#0]
000024  2001              MOVS     r0,#1
000026  4788              BLX      r1
;;;72     	 iic[device]->scl(1);
000028  48d4              LDR      r0,|L1.892|
00002a  f8500024          LDR      r0,[r0,r4,LSL #2]
00002e  6841              LDR      r1,[r0,#4]
000030  2001              MOVS     r0,#1
000032  4788              BLX      r1
;;;73     	 iic_half_delay();
000034  f7fffffe          BL       iic_half_delay
;;;74     	 iic[device]->sda(0);
000038  48d0              LDR      r0,|L1.892|
00003a  f8500024          LDR      r0,[r0,r4,LSL #2]
00003e  6801              LDR      r1,[r0,#0]
000040  2000              MOVS     r0,#0
000042  4788              BLX      r1
;;;75     	 iic_half_delay();
000044  f7fffffe          BL       iic_half_delay
;;;76     	 iic[device]->scl(0);
000048  48cc              LDR      r0,|L1.892|
00004a  f8500024          LDR      r0,[r0,r4,LSL #2]
00004e  6841              LDR      r1,[r0,#4]
000050  2000              MOVS     r0,#0
000052  4788              BLX      r1
;;;77     	 iic_half_delay();
000054  f7fffffe          BL       iic_half_delay
;;;78     }
000058  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  iic_stop PROC
;;;80     static void iic_stop(iic_device_t device)
00005a  b510              PUSH     {r4,lr}
;;;81     {
00005c  4604              MOV      r4,r0
;;;82     	 iic[device]->sda(0);
00005e  48c7              LDR      r0,|L1.892|
000060  f8500024          LDR      r0,[r0,r4,LSL #2]
000064  6801              LDR      r1,[r0,#0]
000066  2000              MOVS     r0,#0
000068  4788              BLX      r1
;;;83     	 iic_half_delay();
00006a  f7fffffe          BL       iic_half_delay
;;;84     	 iic[device]->scl(1);
00006e  48c3              LDR      r0,|L1.892|
000070  f8500024          LDR      r0,[r0,r4,LSL #2]
000074  6841              LDR      r1,[r0,#4]
000076  2001              MOVS     r0,#1
000078  4788              BLX      r1
;;;85     	 iic_half_delay();
00007a  f7fffffe          BL       iic_half_delay
;;;86     	 iic[device]->sda(1);
00007e  48bf              LDR      r0,|L1.892|
000080  f8500024          LDR      r0,[r0,r4,LSL #2]
000084  6801              LDR      r1,[r0,#0]
000086  2001              MOVS     r0,#1
000088  4788              BLX      r1
;;;87     	 iic_half_delay();
00008a  f7fffffe          BL       iic_half_delay
;;;88     }
00008e  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  iic_bit_out PROC
;;;90     
;;;91     static void iic_bit_out(iic_device_t device, uint8 bit)
000090  b570              PUSH     {r4-r6,lr}
;;;92     {
000092  4604              MOV      r4,r0
000094  460d              MOV      r5,r1
;;;93     	 iic[device]->sda(bit);
000096  48b9              LDR      r0,|L1.892|
000098  f8500024          LDR      r0,[r0,r4,LSL #2]
00009c  6801              LDR      r1,[r0,#0]
00009e  4628              MOV      r0,r5
0000a0  4788              BLX      r1
;;;94     	 iic_half_delay();
0000a2  f7fffffe          BL       iic_half_delay
;;;95     	 iic[device]->scl(1);
0000a6  48b5              LDR      r0,|L1.892|
0000a8  f8500024          LDR      r0,[r0,r4,LSL #2]
0000ac  6841              LDR      r1,[r0,#4]
0000ae  2001              MOVS     r0,#1
0000b0  4788              BLX      r1
;;;96     	 iic_delay();
0000b2  f7fffffe          BL       iic_delay
;;;97     	 iic[device]->scl(0);
0000b6  48b1              LDR      r0,|L1.892|
0000b8  f8500024          LDR      r0,[r0,r4,LSL #2]
0000bc  6841              LDR      r1,[r0,#4]
0000be  2000              MOVS     r0,#0
0000c0  4788              BLX      r1
;;;98     	 iic_delay();
0000c2  f7fffffe          BL       iic_delay
;;;99     }
0000c6  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP

                  iic_bit_in PROC
;;;101    static uint8 iic_bit_in(iic_device_t device) 
0000c8  b570              PUSH     {r4-r6,lr}
;;;102    {
0000ca  4604              MOV      r4,r0
;;;103    	 uint8 bit;
;;;104    	
;;;105    	 iic[device]->scl(1);
0000cc  48ab              LDR      r0,|L1.892|
0000ce  f8500024          LDR      r0,[r0,r4,LSL #2]
0000d2  6841              LDR      r1,[r0,#4]
0000d4  2001              MOVS     r0,#1
0000d6  4788              BLX      r1
;;;106    	 iic_delay();
0000d8  f7fffffe          BL       iic_delay
;;;107    	 bit = iic[device]->sda_in();
0000dc  49a7              LDR      r1,|L1.892|
0000de  f8511024          LDR      r1,[r1,r4,LSL #2]
0000e2  6888              LDR      r0,[r1,#8]
0000e4  4780              BLX      r0
0000e6  4605              MOV      r5,r0
;;;108    	 iic_delay();
0000e8  f7fffffe          BL       iic_delay
;;;109    	 iic[device]->scl(0);
0000ec  48a3              LDR      r0,|L1.892|
0000ee  f8500024          LDR      r0,[r0,r4,LSL #2]
0000f2  6841              LDR      r1,[r0,#4]
0000f4  2000              MOVS     r0,#0
0000f6  4788              BLX      r1
;;;110    	 iic_delay();
0000f8  f7fffffe          BL       iic_delay
;;;111    	
;;;112    	 return bit;
0000fc  4628              MOV      r0,r5
;;;113    }
0000fe  bd70              POP      {r4-r6,pc}
;;;114    
                          ENDP

                  iic_byte_in PROC
;;;115    static uint8 iic_byte_in(iic_device_t device, uint8 ack)
000100  e92d41f0          PUSH     {r4-r8,lr}
;;;116    {
000104  4604              MOV      r4,r0
000106  460f              MOV      r7,r1
;;;117    	 uint8 index,byte = 0;
000108  2500              MOVS     r5,#0
;;;118    
;;;119    	 iic[device]->sda(1);
00010a  489c              LDR      r0,|L1.892|
00010c  f8500024          LDR      r0,[r0,r4,LSL #2]
000110  6801              LDR      r1,[r0,#0]
000112  2001              MOVS     r0,#1
000114  4788              BLX      r1
;;;120    	 iic_half_delay();
000116  f7fffffe          BL       iic_half_delay
;;;121    	 
;;;122       for(index = 0; index < 8; index++){
00011a  2600              MOVS     r6,#0
00011c  e009              B        |L1.306|
                  |L1.286|
;;;123         byte <<= 1;
00011e  0668              LSLS     r0,r5,#25
000120  0e05              LSRS     r5,r0,#24
;;;124    		 if(iic_bit_in(device)) byte |= 0x01;
000122  4620              MOV      r0,r4
000124  f7fffffe          BL       iic_bit_in
000128  b108              CBZ      r0,|L1.302|
00012a  f0450501          ORR      r5,r5,#1
                  |L1.302|
00012e  1c70              ADDS     r0,r6,#1              ;122
000130  b2c6              UXTB     r6,r0                 ;122
                  |L1.306|
000132  2e08              CMP      r6,#8                 ;122
000134  dbf3              BLT      |L1.286|
;;;125    	 }		 
;;;126    	 
;;;127    	 iic_bit_out(device, ack);
000136  4639              MOV      r1,r7
000138  4620              MOV      r0,r4
00013a  f7fffffe          BL       iic_bit_out
;;;128    	 iic_half_delay();
00013e  f7fffffe          BL       iic_half_delay
;;;129    	 iic[device]->sda(1);
000142  488e              LDR      r0,|L1.892|
000144  f8500024          LDR      r0,[r0,r4,LSL #2]
000148  6801              LDR      r1,[r0,#0]
00014a  2001              MOVS     r0,#1
00014c  4788              BLX      r1
;;;130    	 iic_half_delay();
00014e  f7fffffe          BL       iic_half_delay
;;;131    	 
;;;132    	 return byte;
000152  4628              MOV      r0,r5
;;;133    }
000154  e8bd81f0          POP      {r4-r8,pc}
;;;134    
                          ENDP

                  iic_ack_in PROC
;;;135    static uint8 iic_ack_in(iic_device_t device) 
000158  b570              PUSH     {r4-r6,lr}
;;;136    {
00015a  4604              MOV      r4,r0
;;;137    	 uint8 bit;
;;;138    	
;;;139    	 iic[device]->sda(1);
00015c  4887              LDR      r0,|L1.892|
00015e  f8500024          LDR      r0,[r0,r4,LSL #2]
000162  6801              LDR      r1,[r0,#0]
000164  2001              MOVS     r0,#1
000166  4788              BLX      r1
;;;140    	 iic_half_delay();
000168  f7fffffe          BL       iic_half_delay
;;;141    	
;;;142    	 iic[device]->scl(1);
00016c  4883              LDR      r0,|L1.892|
00016e  f8500024          LDR      r0,[r0,r4,LSL #2]
000172  6841              LDR      r1,[r0,#4]
000174  2001              MOVS     r0,#1
000176  4788              BLX      r1
;;;143    	 iic_delay();
000178  f7fffffe          BL       iic_delay
;;;144    	 iic_delay();
00017c  f7fffffe          BL       iic_delay
;;;145    	 bit = iic[device]->sda_in();
000180  497e              LDR      r1,|L1.892|
000182  f8511024          LDR      r1,[r1,r4,LSL #2]
000186  6888              LDR      r0,[r1,#8]
000188  4780              BLX      r0
00018a  4605              MOV      r5,r0
;;;146    	 iic_delay();
00018c  f7fffffe          BL       iic_delay
;;;147    	 iic[device]->scl(0);
000190  487a              LDR      r0,|L1.892|
000192  f8500024          LDR      r0,[r0,r4,LSL #2]
000196  6841              LDR      r1,[r0,#4]
000198  2000              MOVS     r0,#0
00019a  4788              BLX      r1
;;;148    	 iic_delay();
00019c  f7fffffe          BL       iic_delay
;;;149    	
;;;150    	 return bit;
0001a0  4628              MOV      r0,r5
;;;151    }
0001a2  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP

                  iic_byte_out PROC
;;;153    
;;;154    static int iic_byte_out(iic_device_t device, uint8 byte)
0001a4  b570              PUSH     {r4-r6,lr}
;;;155    {
0001a6  4605              MOV      r5,r0
0001a8  460c              MOV      r4,r1
;;;156    	  uint8 index;
;;;157    	
;;;158    	  for(index = 0; index < 8; index++){
0001aa  2600              MOVS     r6,#0
0001ac  e00f              B        |L1.462|
                  |L1.430|
;;;159    			if(byte & 0x80){
0001ae  f0140f80          TST      r4,#0x80
0001b2  d004              BEQ      |L1.446|
;;;160    				iic_bit_out(device,1);
0001b4  2101              MOVS     r1,#1
0001b6  4628              MOV      r0,r5
0001b8  f7fffffe          BL       iic_bit_out
0001bc  e003              B        |L1.454|
                  |L1.446|
;;;161    			}else{
;;;162    				iic_bit_out(device,0);
0001be  2100              MOVS     r1,#0
0001c0  4628              MOV      r0,r5
0001c2  f7fffffe          BL       iic_bit_out
                  |L1.454|
;;;163    			}
;;;164    			byte <<= 1;
0001c6  0660              LSLS     r0,r4,#25
0001c8  0e04              LSRS     r4,r0,#24
0001ca  1c70              ADDS     r0,r6,#1              ;158
0001cc  b2c6              UXTB     r6,r0                 ;158
                  |L1.462|
0001ce  2e08              CMP      r6,#8                 ;158
0001d0  dbed              BLT      |L1.430|
;;;165    		}
;;;166    		
;;;167    		if(iic_ack_in(device)){
0001d2  4628              MOV      r0,r5
0001d4  f7fffffe          BL       iic_ack_in
0001d8  b140              CBZ      r0,|L1.492|
;;;168    			 SYS_TRACE(IIC_DRIVER_DEBUG, ("iic_byte_out:device[%d] no ack\r\n", device));
0001da  bf00              NOP      
0001dc  4629              MOV      r1,r5
0001de  a068              ADR      r0,|L1.896|
0001e0  f7fffffe          BL       s_printf
0001e4  bf00              NOP      
;;;169    			 return -1;
0001e6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.490|
;;;170    		}
;;;171    		
;;;172    		return 0;
;;;173    }
0001ea  bd70              POP      {r4-r6,pc}
                  |L1.492|
0001ec  2000              MOVS     r0,#0                 ;172
0001ee  e7fc              B        |L1.490|
;;;174    
                          ENDP

                  osal_iic_write_buf PROC
;;;175    int osal_iic_write_buf(iic_device_t device, uint32 map, uint8 *buf, size_t cnt)
0001f0  e92d41f0          PUSH     {r4-r8,lr}
;;;176    {
0001f4  4604              MOV      r4,r0
0001f6  460e              MOV      r6,r1
0001f8  4617              MOV      r7,r2
0001fa  461d              MOV      r5,r3
;;;177    	  uint8 byte_out;
;;;178    	
;;;179    	  OSAL_ASSERT(device < IIC_DEVICE_NUM);
0001fc  2c01              CMP      r4,#1
0001fe  db08              BLT      |L1.530|
000200  bf00              NOP      
000202  4a68              LDR      r2,|L1.932|
000204  a168              ADR      r1,|L1.936|
000206  a06e              ADR      r0,|L1.960|
000208  f7fffffe          BL       s_printf
00020c  bf00              NOP      
00020e  bf00              NOP      
                  |L1.528|
000210  e7fe              B        |L1.528|
                  |L1.530|
;;;180    	  OSAL_ASSERT(buf != NULL);
000212  b947              CBNZ     r7,|L1.550|
000214  bf00              NOP      
000216  4a63              LDR      r2,|L1.932|
000218  a171              ADR      r1,|L1.992|
00021a  a069              ADR      r0,|L1.960|
00021c  f7fffffe          BL       s_printf
000220  bf00              NOP      
000222  bf00              NOP      
                  |L1.548|
000224  e7fe              B        |L1.548|
                  |L1.550|
;;;181    	
;;;182    	  iic_start(device);
000226  4620              MOV      r0,r4
000228  f7fffffe          BL       iic_start
;;;183    	
;;;184    	  byte_out = iic[device]->address & 0xfe;
00022c  4853              LDR      r0,|L1.892|
00022e  f8500024          LDR      r0,[r0,r4,LSL #2]
000232  7b00              LDRB     r0,[r0,#0xc]
000234  f00008fe          AND      r8,r0,#0xfe
;;;185    	
;;;186    	  if(iic_byte_out(device, byte_out) < 0){
000238  4641              MOV      r1,r8
00023a  4620              MOV      r0,r4
00023c  f7fffffe          BL       iic_byte_out
000240  2800              CMP      r0,#0
000242  da06              BGE      |L1.594|
;;;187    			iic_stop(device);
000244  4620              MOV      r0,r4
000246  f7fffffe          BL       iic_stop
;;;188    			return -1;
00024a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.590|
;;;189    		}
;;;190    		
;;;191    		if(iic[device]->map_size == 2){
;;;192    			if(iic_byte_out(device, ((map >> 8) & 0xff)) < 0){
;;;193    				iic_stop(device);
;;;194    				return -1;
;;;195    			}
;;;196    			byte_out = map & 0xff;
;;;197    			cnt += 1;
;;;198    		}else if(iic[device]->map_size == 1){
;;;199    			byte_out = map;
;;;200    			cnt += 1;
;;;201    		}
;;;202    		
;;;203    		while(cnt){
;;;204    			if(iic_byte_out(device, byte_out) < 0){
;;;205    				iic_stop(device);
;;;206    				return -1;
;;;207    			}
;;;208    			
;;;209    			byte_out = *buf++;
;;;210    			cnt--; 
;;;211    		}
;;;212    		
;;;213    		iic_stop(device);
;;;214    		
;;;215    		return 0;
;;;216    }
00024e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.594|
000252  484a              LDR      r0,|L1.892|
000254  f8500024          LDR      r0,[r0,r4,LSL #2]     ;191
000258  7b40              LDRB     r0,[r0,#0xd]          ;191
00025a  2802              CMP      r0,#2                 ;191
00025c  d110              BNE      |L1.640|
00025e  f3c62107          UBFX     r1,r6,#8,#8           ;192
000262  4620              MOV      r0,r4                 ;192
000264  f7fffffe          BL       iic_byte_out
000268  2800              CMP      r0,#0                 ;192
00026a  da05              BGE      |L1.632|
00026c  4620              MOV      r0,r4                 ;193
00026e  f7fffffe          BL       iic_stop
000272  f04f30ff          MOV      r0,#0xffffffff        ;194
000276  e7ea              B        |L1.590|
                  |L1.632|
000278  f00608ff          AND      r8,r6,#0xff           ;196
00027c  1c6d              ADDS     r5,r5,#1              ;197
00027e  e008              B        |L1.658|
                  |L1.640|
000280  483e              LDR      r0,|L1.892|
000282  f8500024          LDR      r0,[r0,r4,LSL #2]     ;198
000286  7b40              LDRB     r0,[r0,#0xd]          ;198
000288  2801              CMP      r0,#1                 ;198
00028a  d102              BNE      |L1.658|
00028c  f00608ff          AND      r8,r6,#0xff           ;199
000290  1c6d              ADDS     r5,r5,#1              ;200
                  |L1.658|
000292  e00e              B        |L1.690|
                  |L1.660|
000294  4641              MOV      r1,r8                 ;204
000296  4620              MOV      r0,r4                 ;204
000298  f7fffffe          BL       iic_byte_out
00029c  2800              CMP      r0,#0                 ;204
00029e  da05              BGE      |L1.684|
0002a0  4620              MOV      r0,r4                 ;205
0002a2  f7fffffe          BL       iic_stop
0002a6  f04f30ff          MOV      r0,#0xffffffff        ;206
0002aa  e7d0              B        |L1.590|
                  |L1.684|
0002ac  f8178b01          LDRB     r8,[r7],#1            ;209
0002b0  1e6d              SUBS     r5,r5,#1              ;210
                  |L1.690|
0002b2  2d00              CMP      r5,#0                 ;203
0002b4  d1ee              BNE      |L1.660|
0002b6  4620              MOV      r0,r4                 ;213
0002b8  f7fffffe          BL       iic_stop
0002bc  2000              MOVS     r0,#0                 ;215
0002be  e7c6              B        |L1.590|
;;;217    
                          ENDP

                  osal_iic_write_byte PROC
;;;218    
;;;219    int osal_iic_write_byte(iic_device_t device, uint32 map, uint8 data)
0002c0  b537              PUSH     {r0-r2,r4,r5,lr}
;;;220    {
0002c2  4604              MOV      r4,r0
0002c4  460d              MOV      r5,r1
;;;221    	  return(osal_iic_write_buf(device, map, &data, 1));
0002c6  2301              MOVS     r3,#1
0002c8  aa02              ADD      r2,sp,#8
0002ca  4629              MOV      r1,r5
0002cc  4620              MOV      r0,r4
0002ce  f7fffffe          BL       osal_iic_write_buf
;;;222    }
0002d2  bd3e              POP      {r1-r5,pc}
;;;223    
                          ENDP

                  osal_iic_read_buf PROC
;;;224    
;;;225    int osal_iic_read_buf(iic_device_t device, uint32 map, uint8 *buf, size_t cnt)
0002d4  e92d41ff          PUSH     {r0-r8,lr}
;;;226    {
0002d8  4607              MOV      r7,r0
0002da  4614              MOV      r4,r2
0002dc  461d              MOV      r5,r3
;;;227    	uint8 byte_in;
;;;228    
;;;229      OSAL_ASSERT(buf != NULL);	
0002de  b944              CBNZ     r4,|L1.754|
0002e0  bf00              NOP      
0002e2  4a42              LDR      r2,|L1.1004|
0002e4  a13e              ADR      r1,|L1.992|
0002e6  a036              ADR      r0,|L1.960|
0002e8  f7fffffe          BL       s_printf
0002ec  bf00              NOP      
0002ee  bf00              NOP      
                  |L1.752|
0002f0  e7fe              B        |L1.752|
                  |L1.754|
;;;230    	OSAL_ASSERT(cnt > 0);
0002f2  b945              CBNZ     r5,|L1.774|
0002f4  bf00              NOP      
0002f6  4a3d              LDR      r2,|L1.1004|
0002f8  a13d              ADR      r1,|L1.1008|
0002fa  a031              ADR      r0,|L1.960|
0002fc  f7fffffe          BL       s_printf
000300  bf00              NOP      
000302  bf00              NOP      
                  |L1.772|
000304  e7fe              B        |L1.772|
                  |L1.774|
;;;231    	
;;;232    	 if(osal_iic_write_buf(device, map, (uint8 *)&map, 0) < 0){
000306  2300              MOVS     r3,#0
000308  aa01              ADD      r2,sp,#4
00030a  4638              MOV      r0,r7
00030c  9901              LDR      r1,[sp,#4]
00030e  f7fffffe          BL       osal_iic_write_buf
000312  2800              CMP      r0,#0
000314  da04              BGE      |L1.800|
;;;233    		 return -1;
000316  f04f30ff          MOV      r0,#0xffffffff
                  |L1.794|
;;;234    	 }
;;;235    	 
;;;236    	 iic_start(device);
;;;237    	 
;;;238    	 byte_in = iic[device]->address | 0x01;
;;;239    	 
;;;240    	 if(iic_byte_out(device, byte_in) < 0){
;;;241    		 iic_stop(device);
;;;242    		 return -1;
;;;243    	 }
;;;244    	 
;;;245    	 while(cnt){
;;;246    		 if(--cnt){
;;;247    			 /*before read the last byte, we should send back the ack*/
;;;248    			 byte_in = iic_byte_in(device, 0);
;;;249    		 }else{
;;;250    			 byte_in = iic_byte_in(device, 1);
;;;251    		 }
;;;252    		 *buf++ = byte_in;
;;;253    	 }
;;;254    	 
;;;255    	 iic_stop(device);
;;;256    	 
;;;257    	 return 0;
;;;258    }
00031a  b004              ADD      sp,sp,#0x10
00031c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.800|
000320  4638              MOV      r0,r7                 ;236
000322  f7fffffe          BL       iic_start
000326  4815              LDR      r0,|L1.892|
000328  f8500027          LDR      r0,[r0,r7,LSL #2]     ;238
00032c  7b00              LDRB     r0,[r0,#0xc]          ;238
00032e  f0400601          ORR      r6,r0,#1              ;238
000332  4631              MOV      r1,r6                 ;240
000334  4638              MOV      r0,r7                 ;240
000336  f7fffffe          BL       iic_byte_out
00033a  2800              CMP      r0,#0                 ;240
00033c  da05              BGE      |L1.842|
00033e  4638              MOV      r0,r7                 ;241
000340  f7fffffe          BL       iic_stop
000344  f04f30ff          MOV      r0,#0xffffffff        ;242
000348  e7e7              B        |L1.794|
                  |L1.842|
00034a  e00f              B        |L1.876|
                  |L1.844|
00034c  1e68              SUBS     r0,r5,#1              ;246
00034e  0005              MOVS     r5,r0                 ;246
000350  d005              BEQ      |L1.862|
000352  2100              MOVS     r1,#0                 ;248
000354  4638              MOV      r0,r7                 ;248
000356  f7fffffe          BL       iic_byte_in
00035a  4606              MOV      r6,r0                 ;248
00035c  e004              B        |L1.872|
                  |L1.862|
00035e  2101              MOVS     r1,#1                 ;250
000360  4638              MOV      r0,r7                 ;250
000362  f7fffffe          BL       iic_byte_in
000366  4606              MOV      r6,r0                 ;250
                  |L1.872|
000368  f8046b01          STRB     r6,[r4],#1            ;252
                  |L1.876|
00036c  2d00              CMP      r5,#0                 ;245
00036e  d1ed              BNE      |L1.844|
000370  4638              MOV      r0,r7                 ;255
000372  f7fffffe          BL       iic_stop
000376  2000              MOVS     r0,#0                 ;257
000378  e7cf              B        |L1.794|
;;;259    
                          ENDP

00037a  0000              DCW      0x0000
                  |L1.892|
                          DCD      iic
                  |L1.896|
000380  6969635f          DCB      "iic_byte_out:device[%d] no ack\r\n",0
000384  62797465
000388  5f6f7574
00038c  3a646576
000390  6963655b
000394  25645d20
000398  6e6f2061
00039c  636b0d0a
0003a0  00      
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L1.932|
                          DCD      __FUNCTION__
                  |L1.936|
0003a8  64657669          DCB      "device < IIC_DEVICE_NUM",0
0003ac  6365203c
0003b0  20494943
0003b4  5f444556
0003b8  4943455f
0003bc  4e554d00
                  |L1.960|
0003c0  28257329          DCB      "(%s) has assert failed at %s.\n",0
0003c4  20686173
0003c8  20617373
0003cc  65727420
0003d0  6661696c
0003d4  65642061
0003d8  74202573
0003dc  2e0a00  
0003df  00                DCB      0
                  |L1.992|
0003e0  62756620          DCB      "buf != NULL",0
0003e4  213d204e
0003e8  554c4c00
                  |L1.1004|
                          DCD      |symbol_number.9|
                  |L1.1008|
0003f0  636e7420          DCB      "cnt > 0",0
0003f4  3e203000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6f73616c          DCB      0x6f,0x73,0x61,0x6c
000004  5f696963          DCB      0x5f,0x69,0x69,0x63
000008  5f777269          DCB      0x5f,0x77,0x72,0x69
00000c  74655f62          DCB      0x74,0x65,0x5f,0x62
000010  756600            DCB      0x75,0x66,0x00
                  |symbol_number.9|
000013  6f                DCB      0x6f
000014  73616c5f          DCB      0x73,0x61,0x6c,0x5f
000018  6969635f          DCB      0x69,0x69,0x63,0x5f
00001c  72656164          DCB      0x72,0x65,0x61,0x64
000020  5f627566          DCB      0x5f,0x62,0x75,0x66
000024  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  epprom
                          DCD      epprom_sda
                          DCD      epprom_scl
                          DCD      epprom_sda_in
00000c  a0020000          DCB      0xa0,0x02,0x00,0x00
                  iic
                          DCD      epprom
