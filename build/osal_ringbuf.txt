; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\build\osal_ringbuf.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\osal_ringbuf.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\driver -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C1290NCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DTM4C1290NCZAD --omf_browse=.\build\osal_ringbuf.crf Application\OSAL_RingBuf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ring_buffer_init PROC
;;;12     
;;;13     void ring_buffer_init(void)
000000  b510              PUSH     {r4,lr}
;;;14     {
;;;15     	 uint8 index;
;;;16     	
;;;17     	 for(index = 0; index < RING_BUF_COUNT; index++)
000002  2400              MOVS     r4,#0
000004  e018              B        |L1.56|
                  |L1.6|
;;;18     	{
;;;19     		   ring_list[index]->pread = ring_list[index]->buffer;
000006  484c              LDR      r0,|L1.312|
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  494a              LDR      r1,|L1.312|
00000e  f8511024          LDR      r1,[r1,r4,LSL #2]
000012  f8c10204          STR      r0,[r1,#0x204]
;;;20     		   ring_list[index]->pwrite = ring_list[index]->buffer;
000016  4848              LDR      r0,|L1.312|
000018  f8500024          LDR      r0,[r0,r4,LSL #2]
00001c  4946              LDR      r1,|L1.312|
00001e  f8511024          LDR      r1,[r1,r4,LSL #2]
000022  f8c10208          STR      r0,[r1,#0x208]
;;;21     		   memset(ring_list[index]->buffer, 0, sizeof(ring_list[index]->buffer));
000026  4944              LDR      r1,|L1.312|
000028  f8510024          LDR      r0,[r1,r4,LSL #2]
00002c  f44f7100          MOV      r1,#0x200
000030  f7fffffe          BL       __aeabi_memclr4
000034  1c60              ADDS     r0,r4,#1              ;17
000036  b2c4              UXTB     r4,r0                 ;17
                  |L1.56|
000038  2c00              CMP      r4,#0                 ;17
00003a  d0e4              BEQ      |L1.6|
;;;22     	}
;;;23     
;;;24     }
00003c  bd10              POP      {r4,pc}
;;;25     
                          ENDP

                  ring_buffer_write PROC
;;;26     void ring_buffer_write(ringbuf_device_t index, uint8 ch)
00003e  b570              PUSH     {r4-r6,lr}
;;;27     {
000040  4605              MOV      r5,r0
000042  460e              MOV      r6,r1
;;;28     	  ring_buffer_t *p;
;;;29     	
;;;30     	  OSAL_ASSERT(index < DEVICE_NUM);
000044  2d03              CMP      r5,#3
000046  db08              BLT      |L1.90|
000048  bf00              NOP      
00004a  4a3c              LDR      r2,|L1.316|
00004c  a13c              ADR      r1,|L1.320|
00004e  a041              ADR      r0,|L1.340|
000050  f7fffffe          BL       s_printf
000054  bf00              NOP      
000056  bf00              NOP      
                  |L1.88|
000058  e7fe              B        |L1.88|
                  |L1.90|
;;;31     	
;;;32     	  p = ring_list[index];
00005a  4837              LDR      r0,|L1.312|
00005c  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;33     	
;;;34     	  if(p->bytes_in_buffer == RING_BUF_SIZE) return;
000060  f8d40200          LDR      r0,[r4,#0x200]
000064  f5b07f00          CMP      r0,#0x200
000068  d100              BNE      |L1.108|
                  |L1.106|
;;;35     	
;;;36     	  *p->pwrite++ = ch;
;;;37     	
;;;38     	  if(p->pwrite - p->buffer >= RING_BUF_SIZE)
;;;39     		{
;;;40     			  p->pwrite = p->buffer;    
;;;41     		}
;;;42     		
;;;43     		p->bytes_in_buffer++;
;;;44     }
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  f8d41208          LDR      r1,[r4,#0x208]        ;36
000070  1c48              ADDS     r0,r1,#1              ;36
000072  f8c40208          STR      r0,[r4,#0x208]        ;36
000076  700e              STRB     r6,[r1,#0]            ;36
000078  f8d40208          LDR      r0,[r4,#0x208]        ;38
00007c  1b00              SUBS     r0,r0,r4              ;38
00007e  f5b07f00          CMP      r0,#0x200             ;38
000082  db01              BLT      |L1.136|
000084  f8c44208          STR      r4,[r4,#0x208]        ;40
                  |L1.136|
000088  f8d40200          LDR      r0,[r4,#0x200]        ;43
00008c  1c40              ADDS     r0,r0,#1              ;43
00008e  f8c40200          STR      r0,[r4,#0x200]        ;43
000092  bf00              NOP      
000094  e7e9              B        |L1.106|
;;;45     
                          ENDP

                  ring_buffer_read PROC
;;;46     
;;;47     uint8 ring_buffer_read(ringbuf_device_t index)
000096  b570              PUSH     {r4-r6,lr}
;;;48     {  
000098  4605              MOV      r5,r0
;;;49     	  uint8 byte = 0;
00009a  2600              MOVS     r6,#0
;;;50     	  ring_buffer_t *p;
;;;51     	
;;;52     	  OSAL_ASSERT(index < DEVICE_NUM);
00009c  2d03              CMP      r5,#3
00009e  db08              BLT      |L1.178|
0000a0  bf00              NOP      
0000a2  4a34              LDR      r2,|L1.372|
0000a4  a126              ADR      r1,|L1.320|
0000a6  a02b              ADR      r0,|L1.340|
0000a8  f7fffffe          BL       s_printf
0000ac  bf00              NOP      
0000ae  bf00              NOP      
                  |L1.176|
0000b0  e7fe              B        |L1.176|
                  |L1.178|
;;;53     	
;;;54     	  p = ring_list[index];
0000b2  4821              LDR      r0,|L1.312|
0000b4  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;55     	
;;;56     	  byte = * p->pread++;
0000b8  f8d41204          LDR      r1,[r4,#0x204]
0000bc  1c48              ADDS     r0,r1,#1
0000be  f8c40204          STR      r0,[r4,#0x204]
0000c2  780e              LDRB     r6,[r1,#0]
;;;57     	
;;;58     	  if( p->pread -  p->buffer >= RING_BUF_SIZE)
0000c4  f8d40204          LDR      r0,[r4,#0x204]
0000c8  1b00              SUBS     r0,r0,r4
0000ca  f5b07f00          CMP      r0,#0x200
0000ce  db01              BLT      |L1.212|
;;;59     		{
;;;60     			     p->pread =  p->buffer;
0000d0  f8c44204          STR      r4,[r4,#0x204]
                  |L1.212|
;;;61     		}
;;;62     		
;;;63     		p->bytes_in_buffer--;
0000d4  f8d40200          LDR      r0,[r4,#0x200]
0000d8  1e40              SUBS     r0,r0,#1
0000da  f8c40200          STR      r0,[r4,#0x200]
;;;64     		
;;;65     		return byte;
0000de  4630              MOV      r0,r6
;;;66     }
0000e0  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  Is_ring_buffer_empty PROC
;;;68     bool Is_ring_buffer_empty(ringbuf_device_t index)
0000e2  b570              PUSH     {r4-r6,lr}
;;;69     {
0000e4  4604              MOV      r4,r0
;;;70     	  ring_buffer_t *p;
;;;71     	
;;;72     	  OSAL_ASSERT(index < DEVICE_NUM);
0000e6  2c03              CMP      r4,#3
0000e8  db08              BLT      |L1.252|
0000ea  bf00              NOP      
0000ec  4a22              LDR      r2,|L1.376|
0000ee  a114              ADR      r1,|L1.320|
0000f0  a018              ADR      r0,|L1.340|
0000f2  f7fffffe          BL       s_printf
0000f6  bf00              NOP      
0000f8  bf00              NOP      
                  |L1.250|
0000fa  e7fe              B        |L1.250|
                  |L1.252|
;;;73     	
;;;74     	  p = ring_list[index];
0000fc  480e              LDR      r0,|L1.312|
0000fe  f8505024          LDR      r5,[r0,r4,LSL #2]
;;;75     	
;;;76     	 if( p->bytes_in_buffer > 0) return false;
000102  f8d50200          LDR      r0,[r5,#0x200]
000106  b108              CBZ      r0,|L1.268|
000108  2000              MOVS     r0,#0
                  |L1.266|
;;;77     	 else return true;
;;;78     }
00010a  bd70              POP      {r4-r6,pc}
                  |L1.268|
00010c  2001              MOVS     r0,#1                 ;77
00010e  e7fc              B        |L1.266|
;;;79     
                          ENDP

                  ring_buffer_len PROC
;;;80     size_t ring_buffer_len(ringbuf_device_t index)
000110  b570              PUSH     {r4-r6,lr}
;;;81     {
000112  4604              MOV      r4,r0
;;;82     	  ring_buffer_t *p;
;;;83     	  OSAL_ASSERT(index < DEVICE_NUM);
000114  2c03              CMP      r4,#3
000116  db08              BLT      |L1.298|
000118  bf00              NOP      
00011a  4a18              LDR      r2,|L1.380|
00011c  a108              ADR      r1,|L1.320|
00011e  a00d              ADR      r0,|L1.340|
000120  f7fffffe          BL       s_printf
000124  bf00              NOP      
000126  bf00              NOP      
                  |L1.296|
000128  e7fe              B        |L1.296|
                  |L1.298|
;;;84     	
;;;85     	  p = ring_list[index];
00012a  4803              LDR      r0,|L1.312|
00012c  f8505024          LDR      r5,[r0,r4,LSL #2]
;;;86     	
;;;87     	  return  (p->bytes_in_buffer);
000130  f8d50200          LDR      r0,[r5,#0x200]
;;;88     }
000134  bd70              POP      {r4-r6,pc}
;;;89     
                          ENDP

000136  0000              DCW      0x0000
                  |L1.312|
                          DCD      ring_list
                  |L1.316|
                          DCD      __FUNCTION__
                  |L1.320|
000140  696e6465          DCB      "index < DEVICE_NUM",0
000144  78203c20
000148  44455649
00014c  43455f4e
000150  554d00  
000153  00                DCB      0
                  |L1.340|
000154  28257329          DCB      "(%s) has assert failed at %s.\n",0
000158  20686173
00015c  20617373
000160  65727420
000164  6661696c
000168  65642061
00016c  74202573
000170  2e0a00  
000173  00                DCB      0
                  |L1.372|
                          DCD      |symbol_number.9|
                  |L1.376|
                          DCD      |symbol_number.10|
                  |L1.380|
                          DCD      |symbol_number.11|

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72696e67          DCB      0x72,0x69,0x6e,0x67
000004  5f627566          DCB      0x5f,0x62,0x75,0x66
000008  6665725f          DCB      0x66,0x65,0x72,0x5f
00000c  77726974          DCB      0x77,0x72,0x69,0x74
000010  6500              DCB      0x65,0x00
                  |symbol_number.9|
000012  7269              DCB      0x72,0x69
000014  6e675f62          DCB      0x6e,0x67,0x5f,0x62
000018  75666665          DCB      0x75,0x66,0x66,0x65
00001c  725f7265          DCB      0x72,0x5f,0x72,0x65
000020  616400            DCB      0x61,0x64,0x00
                  |symbol_number.10|
000023  49                DCB      0x49
000024  735f7269          DCB      0x73,0x5f,0x72,0x69
000028  6e675f62          DCB      0x6e,0x67,0x5f,0x62
00002c  75666665          DCB      0x75,0x66,0x66,0x65
000030  725f656d          DCB      0x72,0x5f,0x65,0x6d
000034  70747900          DCB      0x70,0x74,0x79,0x00
                  |symbol_number.11|
000038  72696e67          DCB      0x72,0x69,0x6e,0x67
00003c  5f627566          DCB      0x5f,0x62,0x75,0x66
000040  6665725f          DCB      0x66,0x65,0x72,0x5f
000044  6c656e00          DCB      0x6c,0x65,0x6e,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ring_list
                          DCD      console
