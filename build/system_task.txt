; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\build\system_task.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\system_task.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\driver -I.\usblib -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C1290NCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DTM4C1290NCZAD --omf_browse=.\build\system_task.crf Task\System_Task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sys_msg_handler PROC
;;;42     
;;;43     static void sys_msg_handler(sys_msg_t *msg)
000000  b510              PUSH     {r4,lr}
;;;44     {
000002  4604              MOV      r4,r0
;;;45       OSAL_ASSERT(msg != NULL);
000004  b944              CBNZ     r4,|L1.24|
000006  bf00              NOP      
000008  4afb              LDR      r2,|L1.1016|
00000a  a1fc              ADR      r1,|L1.1020|
00000c  a0fe              ADR      r0,|L1.1032|
00000e  f7fffffe          BL       s_printf
000012  bf00              NOP      
000014  bf00              NOP      
                  |L1.22|
000016  e7fe              B        |L1.22|
                  |L1.24|
;;;46     	
;;;47     	switch(msg->msg){
000018  bf00              NOP      
;;;48     		
;;;49     		
;;;50     		default:
;;;51     			break;
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;52     		
;;;53     	}
;;;54     }
00001e  bd10              POP      {r4,pc}
;;;55     
                          ENDP

                  sys_database_save PROC
;;;115    
;;;116    static void sys_database_save(sys_state_t *sys, uint8 type)
000020  e92d41f0          PUSH     {r4-r8,lr}
;;;117    {
000024  4604              MOV      r4,r0
000026  460f              MOV      r7,r1
;;;118    	 uint32 crc = 0;
000028  2500              MOVS     r5,#0
;;;119    	 int retval;
;;;120    	
;;;121    	 if(type == 1){
;;;122    
;;;123    	 }
;;;124    
;;;125    	 crc = 0;
00002a  bf00              NOP      
;;;126    	 
;;;127    	 crc = calc_crc32(crc, sys, SIZEOF_SYS_NV - 8);
00002c  48fe              LDR      r0,|L1.1064|
00002e  6800              LDR      r0,[r0,#0]  ; gSystem_t
000030  3018              ADDS     r0,r0,#0x18
000032  49fd              LDR      r1,|L1.1064|
000034  6809              LDR      r1,[r1,#0]  ; gSystem_t
000036  1a40              SUBS     r0,r0,r1
000038  f1a00208          SUB      r2,r0,#8
00003c  4621              MOV      r1,r4
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       calc_crc32
000044  4605              MOV      r5,r0
;;;128    	
;;;129       SYS_TRACE(NV_SYS_DEBUG, ("sys_database_save:will save sys crc=%x\r\n", crc));	
000046  bf00              NOP      
000048  4629              MOV      r1,r5
00004a  a0f8              ADR      r0,|L1.1068|
00004c  f7fffffe          BL       s_printf
000050  bf00              NOP      
;;;130    	  
;;;131    	 sys->sys_crc32 = crc;
000052  6125              STR      r5,[r4,#0x10]
;;;132    	
;;;133    	 vPortEnterCritical();
000054  f7fffffe          BL       vPortEnterCritical
;;;134    	 retval = eeprom_write(SYS_NV_ADDRESS, (uint8 *)sys, SIZEOF_SYS_NV);
000058  48f3              LDR      r0,|L1.1064|
00005a  6800              LDR      r0,[r0,#0]  ; gSystem_t
00005c  3018              ADDS     r0,r0,#0x18
00005e  49f2              LDR      r1,|L1.1064|
000060  6809              LDR      r1,[r1,#0]  ; gSystem_t
000062  1a42              SUBS     r2,r0,r1
000064  4621              MOV      r1,r4
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       eeprom_write
00006c  4606              MOV      r6,r0
;;;135    	 vPortExitCritical();
00006e  f7fffffe          BL       vPortExitCritical
;;;136    	 OSAL_ASSERT(retval > 0);
000072  2e00              CMP      r6,#0
000074  dc08              BGT      |L1.136|
000076  bf00              NOP      
000078  4af7              LDR      r2,|L1.1112|
00007a  a1f8              ADR      r1,|L1.1116|
00007c  a0e2              ADR      r0,|L1.1032|
00007e  f7fffffe          BL       s_printf
000082  bf00              NOP      
000084  bf00              NOP      
                  |L1.134|
000086  e7fe              B        |L1.134|
                  |L1.136|
;;;137    }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;138    
                          ENDP

                  sys_nv_set_default PROC
;;;55     
;;;56     static void sys_nv_set_default(sys_state_t *sys, uint8 type)
00008c  b570              PUSH     {r4-r6,lr}
;;;57     {
00008e  4604              MOV      r4,r0
000090  460d              MOV      r5,r1
;;;58       if(0 == type){
000092  b925              CBNZ     r5,|L1.158|
;;;59     		sys->src = SRC_COAX1;
000094  2000              MOVS     r0,#0
000096  7060              STRB     r0,[r4,#1]
;;;60     		sys->src_num = SRC_CONSTANT_NUM;
000098  2004              MOVS     r0,#4
00009a  7020              STRB     r0,[r4,#0]
00009c  e000              B        |L1.160|
                  |L1.158|
;;;61     	}else if(1 == type){
00009e  bf00              NOP      
                  |L1.160|
;;;62     		
;;;63     		
;;;64     	}
;;;65      
;;;66     	 sys_database_save(sys, type);
0000a0  4629              MOV      r1,r5
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       sys_database_save
;;;67     
;;;68     }
0000a8  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

                  sys_runtime_parameter_init PROC
;;;73     
;;;74     static void sys_runtime_parameter_init(sys_state_t *sys)
0000aa  2104              MOVS     r1,#4
;;;75     {
;;;76     	 sys->src_num = SRC_CONSTANT_NUM;
0000ac  7001              STRB     r1,[r0,#0]
;;;77     }
0000ae  4770              BX       lr
;;;78     
                          ENDP

                  sys_database_init PROC
;;;80     
;;;81     void sys_database_init(void)
0000b0  b570              PUSH     {r4-r6,lr}
;;;82     {
;;;83     	int retval;
;;;84     	uint32 crc = 0;
0000b2  2500              MOVS     r5,#0
;;;85     	uint8 *p = pvPortMalloc(sizeof(sys_state_t));
0000b4  201c              MOVS     r0,#0x1c
0000b6  f7fffffe          BL       pvPortMalloc
0000ba  4604              MOV      r4,r0
;;;86     	OSAL_ASSERT(p != NULL);
0000bc  b944              CBNZ     r4,|L1.208|
0000be  bf00              NOP      
0000c0  4ae9              LDR      r2,|L1.1128|
0000c2  a1ea              ADR      r1,|L1.1132|
0000c4  a0d0              ADR      r0,|L1.1032|
0000c6  f7fffffe          BL       s_printf
0000ca  bf00              NOP      
0000cc  bf00              NOP      
                  |L1.206|
0000ce  e7fe              B        |L1.206|
                  |L1.208|
;;;87     	memset(p, 0, sizeof(sys_state_t));
0000d0  211c              MOVS     r1,#0x1c
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       __aeabi_memclr
;;;88     	
;;;89       SYS_TRACE(NV_SYS_DEBUG, ("sys_database_init:will load %d bytes sys nv data from epprom\r\n", SIZEOF_SYS_NV));
0000d8  bf00              NOP      
0000da  48d3              LDR      r0,|L1.1064|
0000dc  6800              LDR      r0,[r0,#0]  ; gSystem_t
0000de  3018              ADDS     r0,r0,#0x18
0000e0  4ad1              LDR      r2,|L1.1064|
0000e2  6812              LDR      r2,[r2,#0]  ; gSystem_t
0000e4  1a81              SUBS     r1,r0,r2
0000e6  a0e4              ADR      r0,|L1.1144|
0000e8  f7fffffe          BL       s_printf
0000ec  bf00              NOP      
;;;90     	
;;;91     	vPortEnterCritical();
0000ee  f7fffffe          BL       vPortEnterCritical
;;;92     	retval = eeprom_read(SYS_NV_ADDRESS, p, SIZEOF_SYS_NV);
0000f2  48cd              LDR      r0,|L1.1064|
0000f4  6800              LDR      r0,[r0,#0]  ; gSystem_t
0000f6  3018              ADDS     r0,r0,#0x18
0000f8  49cb              LDR      r1,|L1.1064|
0000fa  6809              LDR      r1,[r1,#0]  ; gSystem_t
0000fc  1a42              SUBS     r2,r0,r1
0000fe  4621              MOV      r1,r4
000100  2000              MOVS     r0,#0
000102  f7fffffe          BL       eeprom_read
000106  4606              MOV      r6,r0
;;;93     	vPortExitCritical();
000108  f7fffffe          BL       vPortExitCritical
;;;94     	OSAL_ASSERT(retval > 0);
00010c  2e00              CMP      r6,#0
00010e  dc08              BGT      |L1.290|
000110  bf00              NOP      
000112  4ad5              LDR      r2,|L1.1128|
000114  a1d1              ADR      r1,|L1.1116|
000116  a0bc              ADR      r0,|L1.1032|
000118  f7fffffe          BL       s_printf
00011c  bf00              NOP      
00011e  bf00              NOP      
                  |L1.288|
000120  e7fe              B        |L1.288|
                  |L1.290|
;;;95     	
;;;96     	crc = calc_crc32(crc, p, SIZEOF_SYS_NV - 8);
000122  48c1              LDR      r0,|L1.1064|
000124  6800              LDR      r0,[r0,#0]  ; gSystem_t
000126  3018              ADDS     r0,r0,#0x18
000128  49bf              LDR      r1,|L1.1064|
00012a  6809              LDR      r1,[r1,#0]  ; gSystem_t
00012c  1a40              SUBS     r0,r0,r1
00012e  f1a00208          SUB      r2,r0,#8
000132  4621              MOV      r1,r4
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       calc_crc32
00013a  4605              MOV      r5,r0
;;;97     	
;;;98     	gSystem_t = (sys_state_t *)p;
00013c  48ba              LDR      r0,|L1.1064|
00013e  6004              STR      r4,[r0,#0]  ; gSystem_t
;;;99     	
;;;100    	if(crc != gSystem_t->sys_crc32){
000140  6800              LDR      r0,[r0,#0]  ; gSystem_t
000142  6900              LDR      r0,[r0,#0x10]
000144  42a8              CMP      r0,r5
000146  d00e              BEQ      |L1.358|
;;;101    		SYS_TRACE(NV_SYS_DEBUG, ("sys_database_init:will set sys nv to default crc=%x, sys_crc=%x\r\n", crc, gSystem_t->sys_crc32));
000148  bf00              NOP      
00014a  48b7              LDR      r0,|L1.1064|
00014c  6800              LDR      r0,[r0,#0]  ; gSystem_t
00014e  4629              MOV      r1,r5
000150  6902              LDR      r2,[r0,#0x10]
000152  48d9              LDR      r0,|L1.1208|
000154  f7fffffe          BL       s_printf
000158  bf00              NOP      
;;;102    		sys_nv_set_default(gSystem_t, 0);
00015a  2100              MOVS     r1,#0
00015c  48b2              LDR      r0,|L1.1064|
00015e  6800              LDR      r0,[r0,#0]  ; gSystem_t
000160  f7fffffe          BL       sys_nv_set_default
000164  e005              B        |L1.370|
                  |L1.358|
;;;103    	}else{
;;;104    		SYS_TRACE(NV_SYS_DEBUG, ("sys_database_init:sys nv data load succuess, crc=%x\r\n", crc));
000166  bf00              NOP      
000168  4629              MOV      r1,r5
00016a  a0d4              ADR      r0,|L1.1212|
00016c  f7fffffe          BL       s_printf
000170  bf00              NOP      
                  |L1.370|
;;;105    	}
;;;106    	
;;;107    
;;;108    	/*init sys runtime parameter*/
;;;109    	sys_runtime_parameter_init(gSystem_t);
000172  48ad              LDR      r0,|L1.1064|
000174  6800              LDR      r0,[r0,#0]  ; gSystem_t
000176  f7fffffe          BL       sys_runtime_parameter_init
;;;110    	
;;;111    	//sys_audio_sense_thres_set(gSystem_t->sense_thres);
;;;112    
;;;113      //memcpy(&gSystem_last, gSystem_t, sizeof(sys_state_t));
;;;114    }
00017a  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP

                  sys_poll_handler PROC
;;;139    
;;;140    void sys_poll_handler(void *arg)
00017c  b510              PUSH     {r4,lr}
;;;141    {
00017e  4604              MOV      r4,r0
;;;142    	
;;;143    	
;;;144    	sys_timeout(100, sys_poll_handler, NULL);
000180  2200              MOVS     r2,#0
000182  f2af0107          ADR      r1,sys_poll_handler + 1
000186  2064              MOVS     r0,#0x64
000188  f7fffffe          BL       sys_timeout
;;;145    }
00018c  bd10              POP      {r4,pc}
;;;146    
                          ENDP

                  system_task PROC
;;;147    
;;;148    void system_task(void *parameter)
00018e  b508              PUSH     {r3,lr}
;;;149    {
;;;150    	sys_msg_t msg;
;;;151    	gSysQueue = xQueueCreate(20, sizeof(sys_msg_t));
000190  2200              MOVS     r2,#0
000192  2102              MOVS     r1,#2
000194  2014              MOVS     r0,#0x14
000196  f7fffffe          BL       xQueueGenericCreate
00019a  49d6              LDR      r1,|L1.1268|
00019c  6008              STR      r0,[r1,#0]  ; gSysQueue
;;;152    	
;;;153    	OSAL_ASSERT(gSysQueue != NULL);
00019e  4608              MOV      r0,r1
0001a0  6800              LDR      r0,[r0,#0]  ; gSysQueue
0001a2  b940              CBNZ     r0,|L1.438|
0001a4  bf00              NOP      
0001a6  4ad4              LDR      r2,|L1.1272|
0001a8  a1d4              ADR      r1,|L1.1276|
0001aa  a097              ADR      r0,|L1.1032|
0001ac  f7fffffe          BL       s_printf
0001b0  bf00              NOP      
0001b2  bf00              NOP      
                  |L1.436|
0001b4  e7fe              B        |L1.436|
                  |L1.438|
;;;154    	
;;;155    	sys_database_init();
0001b6  f7fffffe          BL       sys_database_init
;;;156    	
;;;157    	
;;;158    	while(1){
0001ba  e018              B        |L1.494|
                  |L1.444|
;;;159    		static uint8 is_first = 1;
;;;160    		
;;;161    		if(is_first){
0001bc  48d4              LDR      r0,|L1.1296|
0001be  7800              LDRB     r0,[r0,#0]  ; is_first
0001c0  b138              CBZ      r0,|L1.466|
;;;162    	   	vTaskDelay(1000/portTICK_RATE_MS);
0001c2  f44f707a          MOV      r0,#0x3e8
0001c6  f7fffffe          BL       vTaskDelay
;;;163    			is_first = 0;
0001ca  2000              MOVS     r0,#0
0001cc  49d0              LDR      r1,|L1.1296|
0001ce  7008              STRB     r0,[r1,#0]
0001d0  e002              B        |L1.472|
                  |L1.466|
;;;164    		}else{
;;;165    			vTaskDelay(5/portTICK_RATE_MS);
0001d2  2005              MOVS     r0,#5
0001d4  f7fffffe          BL       vTaskDelay
                  |L1.472|
;;;166    		}
;;;167    		
;;;168    		if(xQueueReceive(gSysQueue, &msg, 0)){
0001d8  2300              MOVS     r3,#0
0001da  461a              MOV      r2,r3
0001dc  4669              MOV      r1,sp
0001de  48c5              LDR      r0,|L1.1268|
0001e0  6800              LDR      r0,[r0,#0]  ; gSysQueue
0001e2  f7fffffe          BL       xQueueGenericReceive
0001e6  b110              CBZ      r0,|L1.494|
;;;169    			sys_msg_handler(&msg);
0001e8  4668              MOV      r0,sp
0001ea  f7fffffe          BL       sys_msg_handler
                  |L1.494|
0001ee  e7e5              B        |L1.444|
;;;170    		}
;;;171    		
;;;172    	}
;;;173    
;;;174    }
;;;175    
                          ENDP

                  sys_send_msg_isr PROC
;;;176    
;;;177    void sys_send_msg_isr(sys_msg_type_t type, uint8 data)
0001f0  b538              PUSH     {r3-r5,lr}
;;;178    {
0001f2  4605              MOV      r5,r0
0001f4  460c              MOV      r4,r1
;;;179    	 sys_msg_t msg;
;;;180    
;;;181       msg.msg = type;
0001f6  f88d5000          STRB     r5,[sp,#0]
;;;182    	 msg.data = data;
0001fa  f88d4001          STRB     r4,[sp,#1]
;;;183    	
;;;184    	 xQueueSendToFrontFromISR(gSysQueue, &msg, NULL);
0001fe  2301              MOVS     r3,#1
000200  2200              MOVS     r2,#0
000202  4669              MOV      r1,sp
000204  48bb              LDR      r0,|L1.1268|
000206  6800              LDR      r0,[r0,#0]  ; gSysQueue
000208  f7fffffe          BL       xQueueGenericSendFromISR
;;;185    }
00020c  bd38              POP      {r3-r5,pc}
;;;186    
                          ENDP

                  sys_send_msg PROC
;;;187    void sys_send_msg(sys_msg_type_t type, uint8 data)
00020e  b538              PUSH     {r3-r5,lr}
;;;188    {
000210  4605              MOV      r5,r0
000212  460c              MOV      r4,r1
;;;189    	 sys_msg_t msg;
;;;190    
;;;191       msg.msg = type;
000214  f88d5000          STRB     r5,[sp,#0]
;;;192    	 msg.data = data;  
000218  f88d4001          STRB     r4,[sp,#1]
;;;193    	
;;;194    	 xQueueSend(gSysQueue, &msg, portMAX_DELAY);
00021c  2300              MOVS     r3,#0
00021e  1e5a              SUBS     r2,r3,#1
000220  4669              MOV      r1,sp
000222  48b4              LDR      r0,|L1.1268|
000224  6800              LDR      r0,[r0,#0]  ; gSysQueue
000226  f7fffffe          BL       xQueueGenericSend
;;;195    }
00022a  bd38              POP      {r3-r5,pc}
;;;196    
                          ENDP

                  sys_hw_power_on PROC
;;;199    
;;;200    static void sys_hw_power_on(void)
00022c  b510              PUSH     {r4,lr}
;;;201    {
;;;202    	AC_STANDBY(1);
00022e  bf00              NOP      
000230  2202              MOVS     r2,#2
000232  4611              MOV      r1,r2
000234  48b7              LDR      r0,|L1.1300|
000236  f7fffffe          BL       GPIOPinWrite
00023a  bf00              NOP      
;;;203    	POWER_EN01(1);
00023c  bf00              NOP      
00023e  2280              MOVS     r2,#0x80
000240  4611              MOV      r1,r2
000242  48b5              LDR      r0,|L1.1304|
000244  f7fffffe          BL       GPIOPinWrite
000248  bf00              NOP      
;;;204    	PS_EN(1);
00024a  bf00              NOP      
00024c  2240              MOVS     r2,#0x40
00024e  4611              MOV      r1,r2
000250  48b1              LDR      r0,|L1.1304|
000252  f7fffffe          BL       GPIOPinWrite
000256  bf00              NOP      
;;;205    	DC5V_EN(1);
000258  bf00              NOP      
00025a  2208              MOVS     r2,#8
00025c  4611              MOV      r1,r2
00025e  48ad              LDR      r0,|L1.1300|
000260  f7fffffe          BL       GPIOPinWrite
000264  bf00              NOP      
;;;206    	DC3V_EN(1);
000266  bf00              NOP      
000268  2204              MOVS     r2,#4
00026a  4611              MOV      r1,r2
00026c  48ab              LDR      r0,|L1.1308|
00026e  f7fffffe          BL       GPIOPinWrite
000272  bf00              NOP      
;;;207    	
;;;208    	bsp_delay_ms(500);
000274  f44f70fa          MOV      r0,#0x1f4
000278  f7fffffe          BL       bsp_delay_ms
;;;209    }
00027c  bd10              POP      {r4,pc}
;;;210    
                          ENDP

                  sys_power_on_handler PROC
;;;211    
;;;212    static void sys_power_on_handler(sys_state_t *sys)
00027e  b510              PUSH     {r4,lr}
;;;213    {
000280  4604              MOV      r4,r0
;;;214    	sys_hw_power_on();
000282  f7fffffe          BL       sys_hw_power_on
;;;215    	
;;;216    	lcd_init();
000286  f7fffffe          BL       lcd_init
;;;217    	
;;;218    }
00028a  bd10              POP      {r4,pc}
;;;219    
                          ENDP

                  timeout_test PROC
;;;220    void timeout_test(void *arg)
00028c  b510              PUSH     {r4,lr}
;;;221    {
00028e  4604              MOV      r4,r0
;;;222    	SYS_TRACE(TIMERS_DEBUG, ("timeout_test\r\n"));
000290  bf00              NOP      
000292  a0a3              ADR      r0,|L1.1312|
000294  f7fffffe          BL       s_printf
000298  bf00              NOP      
;;;223    	
;;;224    	sys_timeout(500, timeout_test, NULL);
00029a  2200              MOVS     r2,#0
00029c  f2af0113          ADR      r1,timeout_test + 1
0002a0  f44f70fa          MOV      r0,#0x1f4
0002a4  f7fffffe          BL       sys_timeout
;;;225    }
0002a8  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  power_on PROC
;;;227    
;;;228    int power_on(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0002aa  b570              PUSH     {r4-r6,lr}
;;;229    {
0002ac  4604              MOV      r4,r0
0002ae  460d              MOV      r5,r1
0002b0  4616              MOV      r6,r2
;;;230    	  
;;;231    	sys_power_on_handler(gSystem_t);
0002b2  485d              LDR      r0,|L1.1064|
0002b4  6800              LDR      r0,[r0,#0]  ; gSystem_t
0002b6  f7fffffe          BL       sys_power_on_handler
;;;232    	return 0;
0002ba  2000              MOVS     r0,#0
;;;233    }
0002bc  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP

                  lcd_test PROC
;;;240    
;;;241    int lcd_test(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0002be  b570              PUSH     {r4-r6,lr}
;;;242    {
0002c0  4604              MOV      r4,r0
0002c2  460d              MOV      r5,r1
0002c4  4616              MOV      r6,r2
;;;243    		
;;;244      display_init_menu();
0002c6  f7fffffe          BL       display_init_menu
;;;245    	
;;;246    	//SYS_TRACE("\r\n");
;;;247    		
;;;248    	return 0;
0002ca  2000              MOVS     r0,#0
;;;249    }
0002cc  bd70              POP      {r4-r6,pc}
;;;250    
                          ENDP

                  timer_test PROC
;;;253    
;;;254    int timer_test(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0002ce  b570              PUSH     {r4-r6,lr}
;;;255    {
0002d0  4604              MOV      r4,r0
0002d2  460d              MOV      r5,r1
0002d4  4616              MOV      r6,r2
;;;256    		
;;;257      sys_timeout(500, timeout_test, NULL);
0002d6  2200              MOVS     r2,#0
0002d8  f2af014f          ADR      r1,timeout_test + 1
0002dc  f44f70fa          MOV      r0,#0x1f4
0002e0  f7fffffe          BL       sys_timeout
;;;258    	
;;;259    //	SYS_TRACE("\r\nbegin timer_test\r\n");
;;;260    		
;;;261    	return 0;
0002e4  2000              MOVS     r0,#0
;;;262    }
0002e6  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

                  dis_task_msg PROC
;;;266    
;;;267    int dis_task_msg(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0002e8  b570              PUSH     {r4-r6,lr}
;;;268    {
0002ea  4604              MOV      r4,r0
0002ec  460d              MOV      r5,r1
0002ee  4616              MOV      r6,r2
;;;269    		
;;;270      dis_send_msg(0,0);
0002f0  2100              MOVS     r1,#0
0002f2  4608              MOV      r0,r1
0002f4  f7fffffe          BL       dis_send_msg
;;;271    	
;;;272    	return 0;
0002f8  2000              MOVS     r0,#0
;;;273    }
0002fa  bd70              POP      {r4-r6,pc}
;;;274    
                          ENDP

                  sort_list_add PROC
;;;285    
;;;286    static void sort_list_add(List_t **head, List_t *node)
0002fc  4602              MOV      r2,r0
;;;287    {
;;;288    	List_t *p = *head;
0002fe  6810              LDR      r0,[r2,#0]
;;;289    	
;;;290    	if(p){
000300  b130              CBZ      r0,|L1.784|
;;;291    		while(p->next){
000302  e000              B        |L1.774|
                  |L1.772|
;;;292    			p = p->next;
000304  6840              LDR      r0,[r0,#4]
                  |L1.774|
000306  6843              LDR      r3,[r0,#4]            ;291
000308  2b00              CMP      r3,#0                 ;291
00030a  d1fb              BNE      |L1.772|
;;;293    		}
;;;294    		
;;;295    		p->next = node;
00030c  6041              STR      r1,[r0,#4]
00030e  e000              B        |L1.786|
                  |L1.784|
;;;296    		
;;;297    	}else{
;;;298    		*head = node;
000310  6011              STR      r1,[r2,#0]
                  |L1.786|
;;;299    	}
;;;300    	
;;;301    }
000312  4770              BX       lr
;;;302    
                          ENDP

                  dump_list PROC
;;;303    static void dump_list(List_t *head, const char *s)
000314  b570              PUSH     {r4-r6,lr}
;;;304    {
000316  4604              MOV      r4,r0
000318  460d              MOV      r5,r1
;;;305    	SYS_TRACE(SYS_DEBUG_ON,("%s:", s));
00031a  bf00              NOP      
00031c  4629              MOV      r1,r5
00031e  a084              ADR      r0,|L1.1328|
000320  f7fffffe          BL       s_printf
000324  bf00              NOP      
;;;306    	while(head){
000326  e006              B        |L1.822|
                  |L1.808|
;;;307    		SYS_TRACE(SYS_DEBUG_ON, ("%d->", head->val));
000328  bf00              NOP      
00032a  a082              ADR      r0,|L1.1332|
00032c  6821              LDR      r1,[r4,#0]
00032e  f7fffffe          BL       s_printf
000332  bf00              NOP      
;;;308    		head = head->next;
000334  6864              LDR      r4,[r4,#4]
                  |L1.822|
000336  2c00              CMP      r4,#0                 ;306
000338  d1f6              BNE      |L1.808|
;;;309    	}
;;;310    	SYS_TRACE(SYS_DEBUG_ON, ("NULL\r\n"));
00033a  bf00              NOP      
00033c  a07f              ADR      r0,|L1.1340|
00033e  f7fffffe          BL       s_printf
000342  bf00              NOP      
;;;311    }
000344  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP

                  merge_list PROC
;;;313    static List_t *merge_list(List_t *left, List_t *right)
000346  b57c              PUSH     {r2-r6,lr}
;;;314    {
000348  4604              MOV      r4,r0
00034a  460d              MOV      r5,r1
;;;315    	List_t head;
;;;316    	List_t *p = &head;
00034c  466e              MOV      r6,sp
;;;317    	
;;;318    	while(left && right){
00034e  e009              B        |L1.868|
                  |L1.848|
;;;319    		if(left->val <= right->val){
000350  6820              LDR      r0,[r4,#0]
000352  6829              LDR      r1,[r5,#0]
000354  4288              CMP      r0,r1
000356  dc02              BGT      |L1.862|
;;;320    			p->next = left;
000358  6074              STR      r4,[r6,#4]
;;;321    			left = left->next;
00035a  6864              LDR      r4,[r4,#4]
00035c  e001              B        |L1.866|
                  |L1.862|
;;;322    		}else{
;;;323    			p->next = right;
00035e  6075              STR      r5,[r6,#4]
;;;324    			right = right->next;
000360  686d              LDR      r5,[r5,#4]
                  |L1.866|
;;;325    		}
;;;326    		
;;;327    		p = p->next;
000362  6876              LDR      r6,[r6,#4]
                  |L1.868|
000364  b10c              CBZ      r4,|L1.874|
000366  2d00              CMP      r5,#0                 ;318
000368  d1f2              BNE      |L1.848|
                  |L1.874|
;;;328    	}
;;;329    	
;;;330    	while(left){
00036a  e002              B        |L1.882|
                  |L1.876|
;;;331    		p->next = left;
00036c  6074              STR      r4,[r6,#4]
;;;332    		left = left->next;
00036e  6864              LDR      r4,[r4,#4]
;;;333    		p = p->next;
000370  6876              LDR      r6,[r6,#4]
                  |L1.882|
000372  2c00              CMP      r4,#0                 ;330
000374  d1fa              BNE      |L1.876|
;;;334    	}
;;;335    	
;;;336    	while(right){
000376  e002              B        |L1.894|
                  |L1.888|
;;;337    		p->next = right;
000378  6075              STR      r5,[r6,#4]
;;;338    		right = right->next;
00037a  686d              LDR      r5,[r5,#4]
;;;339    		p = p->next;
00037c  6876              LDR      r6,[r6,#4]
                  |L1.894|
00037e  2d00              CMP      r5,#0                 ;336
000380  d1fa              BNE      |L1.888|
;;;340    	}
;;;341    	
;;;342    	dump_list(head.next, "head.next");
000382  a170              ADR      r1,|L1.1348|
000384  9801              LDR      r0,[sp,#4]
000386  f7fffffe          BL       dump_list
;;;343    	
;;;344    	return head.next;
00038a  9801              LDR      r0,[sp,#4]
;;;345    }
00038c  bd7c              POP      {r2-r6,pc}
;;;346    
                          ENDP

                  do_list_sort PROC
;;;347    static List_t *do_list_sort(List_t *head)
00038e  e92d41f0          PUSH     {r4-r8,lr}
;;;348    {
000392  4604              MOV      r4,r0
;;;349    	List_t *p1, *p2, *left = NULL, *right = NULL;
000394  f04f0800          MOV      r8,#0
000398  2700              MOVS     r7,#0
;;;350    	
;;;351    	dump_list(head, "head");
00039a  a16d              ADR      r1,|L1.1360|
00039c  4620              MOV      r0,r4
00039e  f7fffffe          BL       dump_list
;;;352    	
;;;353    	if(head == NULL || head->next == NULL){
0003a2  b10c              CBZ      r4,|L1.936|
0003a4  6860              LDR      r0,[r4,#4]
0003a6  b910              CBNZ     r0,|L1.942|
                  |L1.936|
;;;354    		return head;
0003a8  4620              MOV      r0,r4
                  |L1.938|
;;;355    	}
;;;356    	
;;;357    	p1 = head;
;;;358    	p2 = head->next;
;;;359    	
;;;360    	while(p2 && p2->next){
;;;361    		p1 = p1->next;
;;;362    		p2 = p2->next->next;
;;;363    	}
;;;364    	
;;;365    	p2 = p1->next;
;;;366    	p1->next = NULL;
;;;367    	
;;;368    	SYS_TRACE(SYS_DEBUG_ON, ("do_list_sort left\r\n"));
;;;369    	left = do_list_sort(head);
;;;370    	dump_list(left, "left");
;;;371    	SYS_TRACE(SYS_DEBUG_ON, ("do_list_sort right\r\n"));
;;;372    	dump_list(p2, "p2");
;;;373    	right = do_list_sort(p2);
;;;374    	dump_list(right, "right");
;;;375    	
;;;376    	return merge_list(left, right);
;;;377    }
0003aa  e8bd81f0          POP      {r4-r8,pc}
                  |L1.942|
0003ae  4625              MOV      r5,r4                 ;357
0003b0  6866              LDR      r6,[r4,#4]            ;358
0003b2  e002              B        |L1.954|
                  |L1.948|
0003b4  686d              LDR      r5,[r5,#4]            ;361
0003b6  6870              LDR      r0,[r6,#4]            ;362
0003b8  6846              LDR      r6,[r0,#4]            ;362
                  |L1.954|
0003ba  b116              CBZ      r6,|L1.962|
0003bc  6870              LDR      r0,[r6,#4]            ;360
0003be  2800              CMP      r0,#0                 ;360
0003c0  d1f8              BNE      |L1.948|
                  |L1.962|
0003c2  686e              LDR      r6,[r5,#4]            ;365
0003c4  2000              MOVS     r0,#0                 ;366
0003c6  6068              STR      r0,[r5,#4]            ;366
0003c8  bf00              NOP                            ;368
0003ca  a063              ADR      r0,|L1.1368|
0003cc  f7fffffe          BL       s_printf
0003d0  bf00              NOP                            ;368
0003d2  4620              MOV      r0,r4                 ;369
0003d4  f7fffffe          BL       do_list_sort
0003d8  4680              MOV      r8,r0                 ;369
0003da  a164              ADR      r1,|L1.1388|
0003dc  4640              MOV      r0,r8                 ;370
0003de  f7fffffe          BL       dump_list
0003e2  bf00              NOP                            ;371
0003e4  a063              ADR      r0,|L1.1396|
0003e6  f7fffffe          BL       s_printf
0003ea  bf00              NOP                            ;371
0003ec  a167              ADR      r1,|L1.1420|
0003ee  4630              MOV      r0,r6                 ;372
0003f0  f7fffffe          BL       dump_list
0003f4  4630              MOV      r0,r6                 ;373
0003f6  e0cb              B        |L1.1424|
                  |L1.1016|
                          DCD      __FUNCTION__
                  |L1.1020|
0003fc  6d736720          DCB      "msg != NULL",0
000400  213d204e
000404  554c4c00
                  |L1.1032|
000408  28257329          DCB      "(%s) has assert failed at %s.\n",0
00040c  20686173
000410  20617373
000414  65727420
000418  6661696c
00041c  65642061
000420  74202573
000424  2e0a00  
000427  00                DCB      0
                  |L1.1064|
                          DCD      gSystem_t
                  |L1.1068|
00042c  7379735f          DCB      "sys_database_save:will save sys crc=%x\r\n",0
000430  64617461
000434  62617365
000438  5f736176
00043c  653a7769
000440  6c6c2073
000444  61766520
000448  73797320
00044c  6372633d
000450  25780d0a
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L1.1112|
                          DCD      |symbol_number.16|
                  |L1.1116|
00045c  72657476          DCB      "retval > 0",0
000460  616c203e
000464  203000  
000467  00                DCB      0
                  |L1.1128|
                          DCD      |symbol_number.15|
                  |L1.1132|
00046c  7020213d          DCB      "p != NULL",0
000470  204e554c
000474  4c00    
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  7379735f          DCB      "sys_database_init:will load %d bytes sys nv data from e"
00047c  64617461
000480  62617365
000484  5f696e69
000488  743a7769
00048c  6c6c206c
000490  6f616420
000494  25642062
000498  79746573
00049c  20737973
0004a0  206e7620
0004a4  64617461
0004a8  2066726f
0004ac  6d2065  
0004af  7070726f          DCB      "pprom\r\n",0
0004b3  6d0d0a00
0004b7  00                DCB      0
                  |L1.1208|
                          DCD      ||.constdata||+0x88
                  |L1.1212|
0004bc  7379735f          DCB      "sys_database_init:sys nv data load succuess, crc=%x\r\n"
0004c0  64617461
0004c4  62617365
0004c8  5f696e69
0004cc  743a7379
0004d0  73206e76
0004d4  20646174
0004d8  61206c6f
0004dc  61642073
0004e0  75636375
0004e4  6573732c
0004e8  20637263
0004ec  3d25780d
0004f0  0a      
0004f1  00                DCB      0
0004f2  00                DCB      0
0004f3  00                DCB      0
                  |L1.1268|
                          DCD      gSysQueue
                  |L1.1272|
                          DCD      |symbol_number.17|
                  |L1.1276|
0004fc  67537973          DCB      "gSysQueue != NULL",0
000500  51756575
000504  6520213d
000508  204e554c
00050c  4c00    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
                          DCD      is_first
                  |L1.1300|
                          DCD      0x40061000
                  |L1.1304|
                          DCD      0x40006000
                  |L1.1308|
                          DCD      0x40063000
                  |L1.1312|
000520  74696d65          DCB      "timeout_test\r\n",0
000524  6f75745f
000528  74657374
00052c  0d0a00  
00052f  00                DCB      0
                  |L1.1328|
000530  25733a00          DCB      "%s:",0
                  |L1.1332|
000534  25642d3e          DCB      "%d->",0
000538  00      
000539  00                DCB      0
00053a  00                DCB      0
00053b  00                DCB      0
                  |L1.1340|
00053c  4e554c4c          DCB      "NULL\r\n",0
000540  0d0a00  
000543  00                DCB      0
                  |L1.1348|
000544  68656164          DCB      "head.next",0
000548  2e6e6578
00054c  7400    
00054e  00                DCB      0
00054f  00                DCB      0
                  |L1.1360|
000550  68656164          DCB      "head",0
000554  00      
000555  00                DCB      0
000556  00                DCB      0
000557  00                DCB      0
                  |L1.1368|
000558  646f5f6c          DCB      "do_list_sort left\r\n",0
00055c  6973745f
000560  736f7274
000564  206c6566
000568  740d0a00
                  |L1.1388|
00056c  6c656674          DCB      "left",0
000570  00      
000571  00                DCB      0
000572  00                DCB      0
000573  00                DCB      0
                  |L1.1396|
000574  646f5f6c          DCB      "do_list_sort right\r\n",0
000578  6973745f
00057c  736f7274
000580  20726967
000584  68740d0a
000588  00      
000589  00                DCB      0
00058a  00                DCB      0
00058b  00                DCB      0
                  |L1.1420|
00058c  703200            DCB      "p2",0
00058f  00                DCB      0
                  |L1.1424|
000590  f7fffffe          BL       do_list_sort
000594  4607              MOV      r7,r0                 ;373
000596  a128              ADR      r1,|L1.1592|
000598  4638              MOV      r0,r7                 ;374
00059a  f7fffffe          BL       dump_list
00059e  4639              MOV      r1,r7                 ;376
0005a0  4640              MOV      r0,r8                 ;376
0005a2  f7fffffe          BL       merge_list
0005a6  e700              B        |L1.938|
;;;378    
                          ENDP

                  sort_list PROC
;;;379    int sort_list(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0005a8  e92d43f0          PUSH     {r4-r9,lr}
;;;380    {
0005ac  b08b              SUB      sp,sp,#0x2c
0005ae  4607              MOV      r7,r0
0005b0  4688              MOV      r8,r1
0005b2  4691              MOV      r9,r2
;;;381    	int temp[10] = {12,21,1,4,34,23,44,11,0,4};
0005b4  2228              MOVS     r2,#0x28
0005b6  4922              LDR      r1,|L1.1600|
0005b8  a801              ADD      r0,sp,#4
0005ba  f7fffffe          BL       __aeabi_memcpy4
;;;382    	uint8 j;
;;;383      List_t *sorted = NULL;
0005be  2600              MOVS     r6,#0
;;;384      
;;;385      for(j = 0; j < 10; j++){
0005c0  2500              MOVS     r5,#0
0005c2  e010              B        |L1.1510|
                  |L1.1476|
;;;386    		List_t *p = (List_t *)pvPortMalloc(sizeof(List_t));
0005c4  2008              MOVS     r0,#8
0005c6  f7fffffe          BL       pvPortMalloc
0005ca  4604              MOV      r4,r0
;;;387    		if(p){
0005cc  b12c              CBZ      r4,|L1.1498|
;;;388    			p->val = temp[j];
0005ce  a801              ADD      r0,sp,#4
0005d0  f8500025          LDR      r0,[r0,r5,LSL #2]
0005d4  6020              STR      r0,[r4,#0]
;;;389    			p->next = NULL;
0005d6  2000              MOVS     r0,#0
0005d8  6060              STR      r0,[r4,#4]
                  |L1.1498|
;;;390    		}
;;;391    		
;;;392    		sort_list_add(&head, p);
0005da  4621              MOV      r1,r4
0005dc  4819              LDR      r0,|L1.1604|
0005de  f7fffffe          BL       sort_list_add
0005e2  1c68              ADDS     r0,r5,#1              ;385
0005e4  b2c5              UXTB     r5,r0                 ;385
                  |L1.1510|
0005e6  2d0a              CMP      r5,#0xa               ;385
0005e8  dbec              BLT      |L1.1476|
;;;393    	}
;;;394      
;;;395    	sorted = do_list_sort(head);
0005ea  4816              LDR      r0,|L1.1604|
0005ec  6800              LDR      r0,[r0,#0]  ; head
0005ee  f7fffffe          BL       do_list_sort
0005f2  4606              MOV      r6,r0
;;;396    	
;;;397    	dump_list(sorted, "sorted");
0005f4  a114              ADR      r1,|L1.1608|
0005f6  4630              MOV      r0,r6
0005f8  f7fffffe          BL       dump_list
;;;398      
;;;399    	
;;;400    	return 0;
0005fc  2000              MOVS     r0,#0
;;;401    }
0005fe  b00b              ADD      sp,sp,#0x2c
000600  e8bd83f0          POP      {r4-r9,pc}
;;;402    
                          ENDP

                  usb_init PROC
;;;407    
;;;408    int usb_init(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
000604  b570              PUSH     {r4-r6,lr}
;;;409    {
000606  4604              MOV      r4,r0
000608  460d              MOV      r5,r1
00060a  4616              MOV      r6,r2
;;;410    		
;;;411    	USB_SWITCH_TO_MCU;
00060c  bf00              NOP      
00060e  2204              MOVS     r2,#4
000610  4611              MOV      r1,r2
000612  480f              LDR      r0,|L1.1616|
000614  f7fffffe          BL       GPIOPinWrite
000618  bf00              NOP      
;;;412    	
;;;413      usb_send_msg(USB_INTERFACE_CONFIG);
00061a  2002              MOVS     r0,#2
00061c  f7fffffe          BL       usb_send_msg
;;;414    
;;;415    	return 0;
000620  2000              MOVS     r0,#0
;;;416    }
000622  bd70              POP      {r4-r6,pc}
;;;417    
                          ENDP

                  usb_start PROC
;;;419    
;;;420    int usb_start(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
000624  b570              PUSH     {r4-r6,lr}
;;;421    {
000626  4604              MOV      r4,r0
000628  460d              MOV      r5,r1
00062a  4616              MOV      r6,r2
;;;422    		
;;;423      usb_send_msg(USB_HOST_READY);
00062c  2000              MOVS     r0,#0
00062e  f7fffffe          BL       usb_send_msg
;;;424    
;;;425    	return 0;
000632  2000              MOVS     r0,#0
;;;426    }
000634  bd70              POP      {r4-r6,pc}
;;;427    
                          ENDP

000636  0000              DCW      0x0000
                  |L1.1592|
000638  72696768          DCB      "right",0
00063c  7400    
00063e  00                DCB      0
00063f  00                DCB      0
                  |L1.1600|
                          DCD      ||.constdata||+0x60
                  |L1.1604|
                          DCD      head
                  |L1.1608|
000648  736f7274          DCB      "sorted",0
00064c  656400  
00064f  00                DCB      0
                  |L1.1616|
                          DCD      0x40065000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  protect_name
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x6
                          DCD      ||.conststring||+0xe
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x37
                          DCD      ||.conststring||+0x41
                          DCD      ||.conststring||+0x4a
                          DCD      ||.conststring||+0x57
                  __FUNCTION__
000020  7379735f          DCB      0x73,0x79,0x73,0x5f
000024  6d73675f          DCB      0x6d,0x73,0x67,0x5f
000028  68616e64          DCB      0x68,0x61,0x6e,0x64
00002c  6c657200          DCB      0x6c,0x65,0x72,0x00
                  |symbol_number.15|
000030  7379735f          DCB      0x73,0x79,0x73,0x5f
000034  64617461          DCB      0x64,0x61,0x74,0x61
000038  62617365          DCB      0x62,0x61,0x73,0x65
00003c  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000040  7400              DCB      0x74,0x00
                  |symbol_number.16|
000042  7379              DCB      0x73,0x79
000044  735f6461          DCB      0x73,0x5f,0x64,0x61
000048  74616261          DCB      0x74,0x61,0x62,0x61
00004c  73655f73          DCB      0x73,0x65,0x5f,0x73
000050  61766500          DCB      0x61,0x76,0x65,0x00
                  |symbol_number.17|
000054  73797374          DCB      0x73,0x79,0x73,0x74
000058  656d5f74          DCB      0x65,0x6d,0x5f,0x74
00005c  61736b00          DCB      0x61,0x73,0x6b,0x00
                          DCD      0x0000000c
                          DCD      0x00000015
                          DCD      0x00000001
                          DCD      0x00000004
                          DCD      0x00000022
                          DCD      0x00000017
                          DCD      0x0000002c
                          DCD      0x0000000b
                          DCD      0x00000000
                          DCD      0x00000004
000088  7379735f          DCB      0x73,0x79,0x73,0x5f
00008c  64617461          DCB      0x64,0x61,0x74,0x61
000090  62617365          DCB      0x62,0x61,0x73,0x65
000094  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000098  743a7769          DCB      0x74,0x3a,0x77,0x69
00009c  6c6c2073          DCB      0x6c,0x6c,0x20,0x73
0000a0  65742073          DCB      0x65,0x74,0x20,0x73
0000a4  7973206e          DCB      0x79,0x73,0x20,0x6e
0000a8  7620746f          DCB      0x76,0x20,0x74,0x6f
0000ac  20646566          DCB      0x20,0x64,0x65,0x66
0000b0  61756c74          DCB      0x61,0x75,0x6c,0x74
0000b4  20637263          DCB      0x20,0x63,0x72,0x63
0000b8  3d25782c          DCB      0x3d,0x25,0x78,0x2c
0000bc  20737973          DCB      0x20,0x73,0x79,0x73
0000c0  5f637263          DCB      0x5f,0x63,0x72,0x63
0000c4  3d25780d          DCB      0x3d,0x25,0x78,0x0d
0000c8  0a00              DCB      0x0a,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  41554449          DCB      "AUDIO",0
000004  4f00    
000006  54524947          DCB      "TRIGGER",0
00000a  47455200
00000e  4f564552          DCB      "OVER_TEMP",0
000012  5f54454d
000016  5000    
000018  4f564552          DCB      "OVER_VOLTAGE_AND_SHORT_CIRCIUT",0
00001c  5f564f4c
000020  54414745
000024  5f414e44
000028  5f53484f
00002c  52545f43
000030  49524349
000034  555400  
000037  4f564552          DCB      "OVER_CLIP",0
00003b  5f434c49
00003f  5000    
000041  44435f45          DCB      "DC_ERROR",0
000045  52524f52
000049  00      
00004a  4f564552          DCB      "OVER_CURRENT",0
00004e  5f435552
000052  52454e54
000056  00      
000057  31355600          DCB      "15V",0

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=0

000000  706f0070          DCB      0x70,0x6f,0x00,0x70
000004  6f776572          DCB      0x6f,0x77,0x65,0x72
000008  206f6e00          DCB      0x20,0x6f,0x6e,0x00
00000c  6c636400          DCB      0x6c,0x63,0x64,0x00
000010  6c636420          DCB      0x6c,0x63,0x64,0x20
000014  696e6974          DCB      0x69,0x6e,0x69,0x74
000018  20746573          DCB      0x20,0x74,0x65,0x73
00001c  74007469          DCB      0x74,0x00,0x74,0x69
000020  6d657200          DCB      0x6d,0x65,0x72,0x00
000024  6469736d          DCB      0x64,0x69,0x73,0x6d
000028  00736f72          DCB      0x00,0x73,0x6f,0x72
00002c  74006c65          DCB      0x74,0x00,0x6c,0x65
000030  65742063          DCB      0x65,0x74,0x20,0x63
000034  6f646520          DCB      0x6f,0x64,0x65,0x20
000038  74657374          DCB      0x74,0x65,0x73,0x74
00003c  00757362          DCB      0x00,0x75,0x73,0x62
000040  6900696e          DCB      0x69,0x00,0x69,0x6e
000044  69742075          DCB      0x69,0x74,0x20,0x75
000048  73620075          DCB      0x73,0x62,0x00,0x75
00004c  73627300          DCB      0x73,0x62,0x73,0x00
000050  73746172          DCB      0x73,0x74,0x61,0x72
000054  74207573          DCB      0x74,0x20,0x75,0x73
000058  6200              DCB      0x62,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  head
                          DCD      0x00000000
                  is_first
000004  01000000          DCB      0x01,0x00,0x00,0x00
                  gSysQueue
                          DCD      0x00000000
                  gSystem_t
                          DCD      0x00000000

                          AREA INIT_CMD, DATA, READONLY, ALIGN=2

                  __init_cmd_po
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
                          DCD      0x00000001
                          DCD      power_on
                          DCD      ||.conststrlit||+0x3
                  __init_cmd_lcd
                  |symbol_number.41|
                          DCD      ||.conststrlit||+0xc
                          DCD      0x00000001
                          DCD      lcd_test
                          DCD      ||.conststrlit||+0x10
                  __init_cmd_timer
                  |symbol_number.42|
                          DCD      ||.conststrlit||+0x1e
                          DCD      0x00000001
                          DCD      timer_test
                          DCD      ||.conststrlit||+0x10
                  __init_cmd_dism
                  |symbol_number.43|
                          DCD      ||.conststrlit||+0x24
                          DCD      0x00000001
                          DCD      dis_task_msg
                          DCD      ||.conststrlit||+0x10
                  __init_cmd_sort
                  |symbol_number.44|
                          DCD      ||.conststrlit||+0x29
                          DCD      0x00000001
                          DCD      sort_list
                          DCD      ||.conststrlit||+0x2e
                  __init_cmd_usbi
                  |symbol_number.45|
                          DCD      ||.conststrlit||+0x3d
                          DCD      0x00000001
                          DCD      usb_init
                          DCD      ||.conststrlit||+0x42
                  __init_cmd_usbs
                  |symbol_number.46|
                          DCD      ||.conststrlit||+0x4b
                          DCD      0x00000001
                          DCD      usb_start
                          DCD      ||.conststrlit||+0x50
